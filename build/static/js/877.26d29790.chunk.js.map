{"version":3,"file":"static/js/877.26d29790.chunk.js","mappings":"4JAKe,SAASA,EAAQC,GAAkF,IAAjF,MAAEC,EAAK,KAAEC,EAAI,YAAEC,EAAW,aAAEC,EAAeA,OAAQ,aAAEC,EAAeA,QAAUL,EAC7G,MAAM,UAAEM,EAAS,WAAEC,IAAeC,EAAAA,EAAAA,MAC3BC,EAAWC,IAAgBC,EAAAA,EAAAA,WAAS,GAGrCC,EAAQT,EAAYU,MAAM,KAG1BC,EAAe,CACnBC,OAAQ,CAAEC,QAAS,EAAGC,EAAG,IACzBC,QAAS,CAAEF,QAAS,EAAGC,EAAG,IAgB5B,OAbAE,EAAAA,EAAAA,YAAU,KACJV,EACFH,IAEAC,IAIK,SAGN,CAACE,EAAWH,EAAWC,KAGxBa,EAAAA,EAAAA,MAAA,OACEC,UAAU,gBACVjB,aAAcA,KACZM,GAAa,GACbN,GAAc,EAEhBC,aAAcA,KACZK,GAAa,GACbL,GAAc,EAEhBiB,QAAUC,GAAMA,EAAEC,iBAAiBC,SAAA,EAEnCC,EAAAA,EAAAA,KAAA,QAAML,UAAU,cAAaI,SAAEvB,KAC/BwB,EAAAA,EAAAA,KAAA,OAAKC,IAAK1B,EAAO2B,IAAI,gBACpBnB,IACCiB,EAAAA,EAAAA,KAACG,EAAAA,EAAOC,IAAG,CACTT,UAAU,UACVU,QAAS,CAAEd,EAAG,OAAQD,QAAS,GAC/BgB,QAAS,CAAEf,EAAG,KAAMD,QAAS,GAC7BiB,KAAM,CAAEhB,EAAG,OAAQD,QAAS,GAC5BkB,WAAY,CAAEC,SAAU,IAAcV,UAEtCC,EAAAA,EAAAA,KAACG,EAAAA,EAAOC,IAAG,CACTT,UAAU,eACVU,QAAQ,SACRC,QAAQ,UACRI,SAAU,CACRlB,QAAS,CACPgB,WAAY,CAAEG,gBAAiB,MAEjCZ,SAEDb,EAAM0B,KAAI,CAACC,EAAMC,KAChBpB,EAAAA,EAAAA,MAACS,EAAAA,EAAOY,KAAI,CAEVL,SAAUtB,EACVoB,WAAY,CAAEC,SAAU,IACxBd,UAAU,eAAeI,SAAA,CAExBc,EAAM,MALFC,WAarB,CC5Ee,SAASE,IAwBtB,OACEtB,EAAAA,EAAAA,MAAA,OAAKC,UAAU,iBAAiBsB,GAAG,SAAQlB,SAAA,EACzCC,EAAAA,EAAAA,KAAA,MAAIL,UAAU,kBAAiBI,SAAC,YAChCC,EAAAA,EAAAA,KAAA,OAAKL,UAAU,cAAaI,SA1Bf,CACf,CACExB,MAAO,8CACPC,KAAM,kBACNC,YAAa,2GAEf,CACEF,MAAO,8CACPC,KAAM,8BACNC,YAAa,6GAEf,CACEF,MAAO,8CACPC,KAAM,SACNC,YAAa,gHAEf,CACEF,MAAO,8CACPC,KAAM,aACNC,YAAa,0HAQDmC,KAAI,CAACM,EAAMJ,KACnBd,EAAAA,EAAAA,KAAA,KAAGmB,KAAK,IAAgBxB,UAAU,eAAcI,UAC9CC,EAAAA,EAAAA,KAAC3B,EAAQ,IAAK6C,KADCJ,SAO3B,C","sources":["Component/Global/GameItem/GameItem.js","Component/Main/GetGame/GetGame.js"],"sourcesContent":["import './GameItem.css';\nimport { useState, useEffect } from 'react';\nimport { motion } from 'framer-motion';\nimport { useAudio } from '../AudioContext/AudioContext';\n\nexport default function GameItem({ image, text, description, onMouseEnter = () => {}, onMouseLeave = () => {} }) {\n  const { playAudio, pauseAudio } = useAudio();\n  const [isHovered, setIsHovered] = useState(false);\n\n  // Split description into words\n  const words = description.split(' ');\n\n  // Animation variants for word animation\n  const wordVariants = {\n    hidden: { opacity: 0, y: 20 },\n    visible: { opacity: 1, y: 0 },\n  };\n\n  useEffect(() => {\n    if (isHovered) {\n      playAudio(); // Play audio on hover\n    } else {\n      pauseAudio(); // Pause audio when not hovered\n    }\n\n    // Cleanup on component unmount\n    return () => {\n      // No need to pause the audio here, it's handled in context\n    };\n  }, [isHovered, playAudio, pauseAudio]);\n\n  return (\n    <div\n      className=\"container-get\"\n      onMouseEnter={() => {\n        setIsHovered(true);\n        onMouseEnter(); // Notify parent to handle hover\n      }}\n      onMouseLeave={() => {\n        setIsHovered(false);\n        onMouseLeave(); // Notify parent to handle unhover\n      }}\n      onClick={(e) => e.preventDefault()}\n    >\n      <span className='text-detail'>{text}</span>\n      <img src={image} alt=\"game images\" />\n      {isHovered && (\n        <motion.div\n          className='overlay'\n          initial={{ y: '100%', opacity: 0 }} // Start from below and hidden\n          animate={{ y: '0%', opacity: 1 }}   // Move to original position and visible\n          exit={{ y: '100%', opacity: 0 }}    // Exit back to below and hidden\n          transition={{ duration: 0.7 }}        // Duration of the overlay animation\n        >\n          <motion.div\n            className='overlay-text'\n            initial=\"hidden\"\n            animate=\"visible\"\n            variants={{\n              visible: {\n                transition: { staggerChildren: 0.1 }, // Staggered animation\n              },\n            }}\n          >\n            {words.map((word, index) => (\n              <motion.span\n                key={index}\n                variants={wordVariants} // Use word animation variants\n                transition={{ duration: 0.5 }} // Individual word animation duration\n                className='overlay-word' // Add a specific class for words\n              >\n                {word}{' '}\n              </motion.span>\n            ))}\n          </motion.div>\n        </motion.div>\n      )}\n    </div>\n  );\n}\n","import './GetGame.css';\nimport GameItem from '../../Global/GameItem/GameItem';\n\nexport default function GetGame() {\n  const gameData = [\n    {\n      image: './images/main page/get-the-game-part/1.webp', \n      text: 'Computer Vision', \n      description: 'Deploy AI like a UAV: train models to spot and track every target. Your mission: no object left unseen.'\n    },\n    {\n      image: './images/main page/get-the-game-part/2.webp', \n      text: 'Natural Language Processing', \n      description: 'Command your models to understand and respond like a top-tier operator. Crack the code of human language!'\n    },\n    {\n      image: './images/main page/get-the-game-part/3.webp', \n      text: 'EdTech', \n      description: 'Revolutionize learning with tactical tools that enhance education. Equip students and educators for victory!'\n    },\n    {\n      image: './images/main page/get-the-game-part/4.webp', \n      text: 'Healthcare', \n      description: 'Develop life-saving tech with AI-powered diagnostics and systems that improve patient care. Your mission: save lives!'\n    }\n  ];\n\n  return (\n    <div className=\"container-game\" id=\"tracks\">\n      <h1 className='title font-bold'>Tracks</h1>\n      <div className='game-tainer'>\n        {gameData.map((game, index) => (\n          <a href=\"#\" key={index} className='overlay-text'>\n            <GameItem {...game} />\n          </a>\n        ))}\n      </div>\n    </div>\n  );\n}\n"],"names":["GameItem","_ref","image","text","description","onMouseEnter","onMouseLeave","playAudio","pauseAudio","useAudio","isHovered","setIsHovered","useState","words","split","wordVariants","hidden","opacity","y","visible","useEffect","_jsxs","className","onClick","e","preventDefault","children","_jsx","src","alt","motion","div","initial","animate","exit","transition","duration","variants","staggerChildren","map","word","index","span","GetGame","id","game","href"],"sourceRoot":""}